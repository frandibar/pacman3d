#ifndef __THREAD_H__
#define __THREAD_H__
#include <pthread.h>

/**Clase que permite utilizar hilos POSIX
 * 
 */
class Thread {
  private:    
    pthread_t _thread;
    pthread_attr_t _attr;
    //funcion que realmente ejecuta el thread tomando this como argumento
    static void* static_run(void* arg);
    //constructor de copia y operator= ocultos
    Thread(const Thread&);
    Thread& operator=(const Thread&);
  protected:
    typedef enum tState {OK,ERROR};
    bool _running;
    bool _mustStop;
    tState _state;
    
    virtual void main() = 0;
    
  public:
  	///constructor
    Thread();
    ///ejecuta hilo
    virtual void run();
    ///intenta detener el hilo cuando sea posible
    virtual void stop();
    ///devuelve si esta corriendo
    virtual bool running() const {return _running;};
    ///espera finalizacion de hilo
    virtual void join();
    ///destuctor
    virtual ~Thread();
    ///duerme unos milisegundos
    static void Sleep(unsigned long msecs);
    ///devuelve si esta en buen estado
    operator bool() const;
};
#endif /* __THREAD_H__ */
